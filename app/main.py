from time import sleep# from datetime import datetimefrom bottle import requestfrom fast_bitrix24 import Bitrix###------------------------------------  ---  ---START HERE---  ---  ------------------------------------------------###webhook = 'https://b24-xlxcp4.bitrix24.ru/rest/1/tscp6l1psv3emwmq/'b = Bitrix(webhook)def add_products():  # ---return products from request    products_list = []    for product in request.json['products']:        products_list.append(product)    return products_list#def add_deal():    b.call(        'crm.deal.add',        {            'fields': {                'TITLE': request.json['title'],                'UF_CRM_DELIVERY_CODE': request.json['delivery_code'],                'UF_CRM_DELIVERY_PRODUCTS': add_products(),                'UF_CRM_DELIVERY_ADDRESS': request.json['delivery_address'],                'UF_CRM_DELIVERY_DATE': request.json['delivery_date'],                'CONTACT_ID': add_contact()            }        }    )def add_deal_link_contact():    b.call(        'crm.deal.add',        {            'fields': {                'TITLE': request.json['title'],                'UF_CRM_DELIVERY_CODE': request.json['delivery_code'],                'UF_CRM_DELIVERY_PRODUCTS': add_products(),                'UF_CRM_DELIVERY_ADDRESS': request.json['delivery_address'],                'UF_CRM_DELIVERY_DATE': request.json['delivery_date'],                'CONTACT_ID': get_contact_id()            }        }    )def add_contact():    contact_fields = b.call(        'crm.contact.add',        {            'fields': {                'NAME': request.json['contact']['name'],                'LAST_NAME': request.json['contact']['surname'],                "TYPE_ID": "CLIENT",                'PHONE': [{'VALUE': request.json['contact']['phone']}],                'ADDRESS': request.json['contact']['address']            }        }    )    return contact_fieldsdef test():    d = request.json['contact']    d = {'NAME': d['name'], 'LAST_NAME': d['surname'], 'ADDRESS': d['address']}    return ddef check_contact():    pin = request.json['contact']    return pindef bt_get_phone_duplicate():    x = b.call('crm.duplicate.findbycomm',               {                   'ENTITY_TYPE': "CONTACT",                   'TYPE': "PHONE",                   'VALUES': [request.json['contact']['phone']],               })    return xdef bt_find_by_delivery_code():    x = b.call('crm.deal.list',               {                   'SELECT': {'UF_'},                   'FILTER': {'UF_CRM_DELIVERY_CODE': request.json['delivery_code']}               })    return xdef get_contact_id():    x = b.call('crm.contact.list',               {                   'FILTER': {'TYPE_ID': 'CLIENT'},                   'SELECT': {'ID'}               }               )    return x[0]['ID']def valid_delivery_code():  # если код заявки есть, то вернет True    try:        return request.json['delivery_code'] == valid_get_info_by_id()['UF_CRM_DELIVERY_CODE']    except TypeError:        return Falsedef get_info_by_id():    x = b.call(        'crm.deal.get',        {'ID': bt_find_by_delivery_code()[0]['ID']}    )    return xdef valid_get_info_by_id():  # возвращает список полей сделки    try:        return get_info_by_id()    except:        return Falsedef valid_delivery_fields():  # True or False    try:        a, p = request.json['delivery_date'], request.json['delivery_address']        c, d = get_info_by_id()['UF_CRM_DELIVERY_DATE'], get_info_by_id()['UF_CRM_DELIVERY_ADDRESS']        e, f = add_products(), get_info_by_id()['UF_CRM_DELIVERY_PRODUCTS']        return a == c and p == d and e == f    except IndexError:        return Falsedef valid_get_contact():    try:        return get_contact_id()    except:        return Falsedef valid_contact():  # главная    if not bt_get_phone_duplicate():        add_contact()        if not valid_delivery_fields():            add_deal_link_contact()            return 'Сделка и контакт созданы'        add_contact_to_deal()        return 'Контакт добавлен к сделке'    elif bt_get_phone_duplicate():        if not valid_delivery_code():            add_deal_link_contact()            return 'Сделка и контакт созданы 2'        elif valid_delivery_code():            if not valid_delivery_fields():                update_delivery_fields()                return 'Сделка обновлена'    return 'Операция завершена успешно'def add_contact_to_deal():    b.call(        'crm.deal.contact.add',        {            'id': get_info_by_id()['ID'],            'fields': {                'CONTACT_ID': get_contact_id()            }        }    )def update_delivery_fields():    b.call(        'crm.deal.update',        {            'id': get_info_by_id()['ID'],            'fields': {                'UF_CRM_DELIVERY_ADDRESS': request.json['delivery_address'],                'UF_CRM_DELIVERY_DATE': request.json['delivery_date'],                'UF_CRM_DELIVERY_PRODUCTS': add_products()            },        }    )# phones_duplicate = b.call(#             'crm.duplicate.findbycomm',#             {#                 'ENTITY_TYPE': "CONTACT",#                 'TYPE': "PHONE",#                 'VALUES': request.json['contact']['phone']#             })####------------------------------------    Main() Starter Function    -----------------------------------------------#### if __name__ == '__main__':#     while True:#         now = datetime.now()#         print(now.hour)#         if now.hour == 6 or now.hour == 22:#             main()#         sleep(1)###------------------------------------    Another functions    -----------------------------------------------------#### contact_list = b.list_and_get(#     'crm.contact.fields',#     'ID'## )## # deals = b.get_all('crm.deal.list')## nums = b.get_by_ID('crm.deal.contact.items.get',#                    [d['ID'] for d in deals])# bt_contact_list = b.call('crm.contact.list',#                          {#                              'FILTER': ['*'],#                              'SELECT': ['NAME', 'LAST_NAME', 'ADDRESS', 'PHONE']#                          }#                          )# def add_users_field():  # ---add users field by fields#     b.call(#         'crm.deal.userfield.add',#         {#             'fields': {#                 'ID': 'contact_surname_field',#                 "FIELD_NAME": "contact_surname",#                 "EDIT_FORM_LABEL": "Фамилия контакта",#                 "LIST_COLUMN_LABEL": "Фамилия контакта",#                 "USER_TYPE_ID": "string",#                 "XML_ID": "MY_STRING",#                 "SETTINGS": {"DEFAULT_VALUE": 'None'},#                 'MULTIPLE': 'N'#             }#         }#     )#     return True# def update_deal_by_field(pk, data):##     b.call(#         'crm.deal.update',#         {#             'ID': pk,#             'fields': {#                 'UF_CRM_DELIVERY_CODE': data['delivery_code'],#                 'desc': data["description"],#                 'contact': data['client'{##                 }]#     }#     }#     )#     return data['delivery_code']